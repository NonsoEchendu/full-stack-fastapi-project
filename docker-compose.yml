include:
  - ./monitoring/docker-compose.yml

services:
  traefik:
    image: traefik:v2.6
    container_name: traefik
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yaml:/etc/traefik/traefik.yaml
      - ./traefik/config:/etc/traefik/config
      - ./traefik/acme:/etc/traefik/acme
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$ruca84Hq$$mbjdMZBAG.KWn7vfN/SNK/"  # admin:password
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 80 || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    env_file:
      - ./frontend/.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.rule=Host(`michaeloxo.tech`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend.middlewares=global-middleware@file"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep nginx | grep -v grep || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    volumes:
      - ./backend/dist:/app/dist
      - postgres_data:/var/lib/postgresql/data
    labels:
      - "traefik.enable=true"
      # for /api
      - "traefik.http.routers.backend.rule=Host(`michaeloxo.tech`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.middlewares=global-middleware@file"
      # for /docs
      - "traefik.http.routers.backend-docs.rule=Host(`michaeloxo.tech`) && PathPrefix(`/docs`)"
      - "traefik.http.routers.backend-docs.entrypoints=websecure"
      - "traefik.http.routers.backend-docs.tls=true"
      - "traefik.http.routers.backend-docs.middlewares=global-middleware@file"
      # shared configuration
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request, sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/docs').getcode() == 200 else 1)"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:13
    container_name: db
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    ports:
      - 5432:5432
    networks:
      - app-network
    restart: unless-stopped

  adminer:
    image: adminer
    container_name: adminer
    labels:
      - "traefik.enable=true"
      # Subdomain approach
      - "traefik.http.routers.adminer-domain.rule=Host(`db.michaeloxo.tech`)"
      - "traefik.http.routers.adminer-domain.entrypoints=websecure"
      - "traefik.http.routers.adminer-domain.tls=true"
      - "traefik.http.routers.adminer-domain.tls.certresolver=myresolver"
      - "traefik.http.routers.adminer-domain.middlewares=global-middleware@file"
      - "traefik.http.services.adminer-domain.loadbalancer.server.port=8080"
    networks:
      - app-network
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 8080 || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
