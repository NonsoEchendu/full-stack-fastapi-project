---
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"

- name: Ensure essential Python packages are present and up-to-date (Ubuntu/Debian)
  ansible.builtin.apt:
    name:
      - python3
      - python3-pip
      - ca-certificates
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"
  register: python_pkg_install
  retries: 3
  delay: 10

- name: Install required packages for Docker
  ansible.builtin.package:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - gnupg
      - rsync
      - acl
    state: present
  when: ansible_os_family == "Debian"

- name: Create directory for Docker GPG key
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

# - name: Download Docker GPG key using get_url 
#   ansible.builtin.get_url:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     dest: /etc/apt/keyrings/docker.asc 
#     mode: '0644'
#     force: yes
#   register: download_gpg_key
#   until: download_gpg_key is succeeded
#   retries: 5
#   delay: 10
#   when: ansible_os_family == "Debian"

- name: Add Docker GPG apt Key
  ansible.builtin.shell: |
    timeout 10 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --yes -o /usr/share/keyrings/docker-archive-keyring.gpg
  args:
    executable: /bin/bash
  become: true
  when: ansible_os_family == "Debian"


# - name: Add Docker Repository pointing to the downloaded GPG key
#   ansible.builtin.apt_repository:
#     repo: "deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
#     state: present
#     filename: docker
#   when: ansible_os_family == "Debian"
#   notify: Update apt cache post repo add

- name: Add Docker Repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
  become: true
  when: ansible_os_family == "Debian"

- name: Install Docker
  ansible.builtin.package:
    name: 
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"
  notify: Start Docker service

- name: Ensure docker group exists
  ansible.builtin.group:
    name: docker
    state: present

- name: Download Docker Compose
  ansible.builtin.shell: |
    curl -L "https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
  args:
    executable: /bin/bash
  become: true

- name: Set permissions for Docker Compose
  ansible.builtin.file:
    path: /usr/local/bin/docker-compose
    mode: '0755'
    owner: root
    group: root
  become: true

- name: Add current user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: Install Python Docker SDK and Docker Compose
  apt:
    name: 
      - python3-docker
      - docker-compose
    state: present
    update_cache: yes


- name: Ensure Docker service is running and enabled
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes

- name: Create shared Docker network for applications
  community.docker.docker_network:
    name: "{{ docker_shared_network }}"
    state: present

- name: Create base application directory on server
  ansible.builtin.file:
    path: "{{ app_base_dir }}"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Create Traefik acme directory with correct permissions
  ansible.builtin.file:
    path: "{{ app_base_dir }}/traefik/acme"
    state: directory
    mode: '0700'
    owner: "root"
    group: "root"

- name: Flush handlers
  ansible.builtin.meta: flush_handlers